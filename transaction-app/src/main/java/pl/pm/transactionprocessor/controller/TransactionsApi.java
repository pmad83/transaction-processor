/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package pl.pm.transactionprocessor.controller;

import pl.pm.transactionprocessor.entity.Transaction;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-25T20:24:51.030596300+01:00[Europe/Berlin]", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "transactions", description = "the transactions API")
public interface TransactionsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /transactions : Tworzy nową transakcję
     *
     * @param transaction  (required)
     * @return Transakcja została utworzona (status code 201)
     *         or Błąd walidacji danych (status code 400)
     */
    @Operation(
        operationId = "createTransaction",
        summary = "Tworzy nową transakcję",
        responses = {
            @ApiResponse(responseCode = "201", description = "Transakcja została utworzona", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Transaction.class))
            }),
            @ApiResponse(responseCode = "400", description = "Błąd walidacji danych")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/transactions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Transaction> createTransaction(
        @Parameter(name = "Transaction", description = "", required = true) @Valid @RequestBody Transaction transaction
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /transactions/{id} : Usuwa transakcję na podstawie ID
     *
     * @param id  (required)
     * @return Transakcja została usunięta (status code 204)
     *         or Transakcja nie znaleziona (status code 404)
     */
    @Operation(
        operationId = "deleteTransaction",
        summary = "Usuwa transakcję na podstawie ID",
        responses = {
            @ApiResponse(responseCode = "204", description = "Transakcja została usunięta"),
            @ApiResponse(responseCode = "404", description = "Transakcja nie znaleziona")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/transactions/{id}"
    )
    
    default ResponseEntity<Void> deleteTransaction(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /transactions : Pobiera wszystkie transakcje
     *
     * @return Lista wszystkich transakcji (status code 200)
     */
    @Operation(
        operationId = "getAllTransactions",
        summary = "Pobiera wszystkie transakcje",
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista wszystkich transakcji", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Transaction.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/transactions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Transaction>> getAllTransactions(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /transactions/{id} : Pobiera transakcję na podstawie ID
     *
     * @param id  (required)
     * @return Zwraca transakcję o podanym ID (status code 200)
     *         or Transakcja nie znaleziona (status code 404)
     */
    @Operation(
        operationId = "getTransactionById",
        summary = "Pobiera transakcję na podstawie ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Zwraca transakcję o podanym ID", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Transaction.class))
            }),
            @ApiResponse(responseCode = "404", description = "Transakcja nie znaleziona")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/transactions/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Transaction> getTransactionById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /transactions/{id} : Aktualizuje transakcję na podstawie ID
     *
     * @param id  (required)
     * @param transaction  (required)
     * @return Transakcja została zaktualizowana (status code 200)
     *         or Błąd walidacji danych (status code 400)
     *         or Transakcja nie znaleziona (status code 404)
     */
    @Operation(
        operationId = "updateTransaction",
        summary = "Aktualizuje transakcję na podstawie ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Transakcja została zaktualizowana", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Transaction.class))
            }),
            @ApiResponse(responseCode = "400", description = "Błąd walidacji danych"),
            @ApiResponse(responseCode = "404", description = "Transakcja nie znaleziona")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/transactions/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Transaction> updateTransaction(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "Transaction", description = "", required = true) @Valid @RequestBody Transaction transaction
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
